---
- name: create db.mysql.shared src directory
  file: path={{ mysql_src_dir }} state=directory owner=root group=root

- name: copy MySQL-server
  copy: src={{ local_mysql_rpm_dir }}/{{ item }}
        dest={{ mysql_src_dir }} owner=root group=root
        backup=yes
  with_items:
    - "{{ mysql_rpm_string % 'server' }}"

- name: install MySQL-server
  yum: name={{ item }}
  with_items:
    - "{{ mysql_src_dir }}/{{ mysql_rpm_string % 'server' }}"
  notify: restart mysql

- name: set my.cnf replica file
  template: src=my.cnf.j2 dest=/etc/my.cnf.rep mode=0644 owner=root group=root
            backup=yes
  register: set_my_cnf_rep

- name: stop mysql server
  service: name=mysql state=stopped enabled=yes
  when: set_my_cnf_rep|changed

- name: set my.cnf file
  template: src=my.cnf.j2 dest=/etc/my.cnf mode=0644 owner=root group=root
            backup=yes

- name: start mysql server
  service: name=mysql state=started enabled=yes

- name: update mysql root password for all root accounts
  mysql_user: name=root host={{ item }} password={{ mysql_vars.root_password }}
  with_items:
   - "{{ ansible_hostname }}"
   - 127.0.0.1
   - ::1
   - localhost
  when: ansible_hostname != 'localhost'

- name: update mysql root password for all root accounts
  mysql_user: name=root host={{ item }} password={{ mysql_vars.root_password }}
  with_items:
   - 127.0.0.1
   - ::1
   - localhost
  when: ansible_hostname == 'localhost'

- name: copy .my.cnf file with root password credentials
  template: src=.my.cnf.j2 dest=~/.my.cnf mode=0600 backup=yes

- name: create database
  mysql_db: name={{ mysql_vars['database'] }} encoding=utf8
  register: create_db_result

## Uncomment this block when importing the local mysql data.
# - name: dump local mysql data
#   local_action: mysql_db state=dump target=/tmp/{{ dumped_sql_name }}.sql.gz
#                 name={{ lookup('env', mysql_env_vars['database']) }}
#                 login_host={{ lookup('env', mysql_env_vars['host']) }}
#                 login_user={{ lookup('env', mysql_env_vars['user']) }}
#                 login_password={{ lookup('env', mysql_env_vars['password']) }}
#   sudo: no
#   when: create_db_result|changed
#
# - name: copy dumped data
#   copy: src=/tmp/{{ dumped_sql_name }}.sql.gz
#         dest={{ mysql_src_dir }} owner=root group=root
#         backup=yes
#   when: create_db_result|changed
#
# - name: delete local dumped data
#   local_action: file path=/tmp/{{ dumped_sql_name }}.sql.gz state=absent
#   sudo: no
#
# - name: import dumped data
#   mysql_db: state=import target={{ mysql_src_dir }}/{{ dumped_sql_name }}.sql.gz
#             name={{ mysql_vars['database'] }}
#   when: create_db_result|changed

## Uncomment this block when importing the local mysql schema only.
# - name: dump local mysql schema
#   local_action: shell mysqldump --quick --no-data --user={{ lookup('env', mysql_env_vars['user']) }}
#                 --password='{{ lookup('env', mysql_env_vars['password']) }}'
#                 --host={{ lookup('env', mysql_env_vars['host']) }} --port=3306
#                 {{ lookup('env', mysql_env_vars['database']) }}
#                 | gzip > /tmp/{{ dumped_sql_name }}-schema.sql.gz
#   sudo: no
#   when: create_db_result|changed
#
# - name: copy dumped schema
#   copy: src=/tmp/{{ dumped_sql_name }}-schema.sql.gz
#         dest={{ mysql_src_dir }} owner=root group=root
#         backup=yes
#   when: create_db_result|changed
#
# - name: delete local dumped schema
#   local_action: file path=/tmp/{{ dumped_sql_name }}-schema.sql.gz state=absent
#   sudo: no
#
# - name: import dumped schema
#   mysql_db: state=import target={{ mysql_src_dir }}/{{ dumped_sql_name }}-schema.sql.gz
#             name={{ mysql_vars['database'] }}
#   when: create_db_result|changed

- name: create mysql user
  mysql_user: name={{ mysql_vars['user'] }} password={{ mysql_vars['password'] }} host={{ item }}
              priv="{{ mysql_vars['database'] }}.*:ALTER,CREATE,CREATE TEMPORARY TABLES,DELETE,DROP,EXECUTE,INDEX,INSERT,LOCK TABLES,SELECT,UPDATE"
              state=present
  with_items: groups['app']
